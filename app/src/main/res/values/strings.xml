<!-- File: strings.xml - Algorithm Visualizer Strings -->
<resources xml:space="preserve">

    <!-- ========================================================= -->
    <!-- GENERAL: Application Information                        -->
    <!-- ========================================================= -->
    <string name="app_name">Algorithm Visualizer</string>


    <!-- ========================================================= -->
    <!-- ALGORITHM EXPLANATIONS                                  -->
    <!-- Cada string contiene la explicación y un ejemplo en Kotlin -->
    <!-- ========================================================= -->

    <!-- Explanation for Bubble Sort (unchanged) -->
    <string name="explanation_text_bubble">
        <![CDATA[
What is Bubble Sort?

Bubble Sort is a simple sorting algorithm that works by repeatedly comparing
adjacent elements in a list and swapping them if they are in the wrong order.

Imagine you have a row of numbers and you want to sort them from smallest to largest.
Bubble Sort will look at the first two numbers, swap them if needed, then move on
to the next pair, and so on. With each pass, the largest unsorted number "bubbles"
up to its correct position.

Here is an example in Kotlin:\n\n

fun bubbleSort(arr: MutableList<Int>) {\n
\u00A0    for (i in 0 until arr.size) {\n
\u00A0\u00A0        for (j in 0 until arr.size - i - 1) {\n
\u00A0\u00A0\u00A0            if (arr[j] > arr[j + 1]) {\n
\u00A0\u00A0\u00A0\u00A0               val temp = arr[j]\n
\u00A0\u00A0\u00A0\u00A0               arr[j] = arr[j + 1]\n
\u00A0\u00A0\u00A0\u00A0               arr[j + 1] = temp\n
\u00A0\u00A0 \u00A0\u00A0           }\n
\u00A0\u00A0\u00A0        }\n
\u00A0\u00A0}\n
}\n\n

In this visualizer, each bar represents a number. The numbers are displayed on the bars,
and the two bars being compared are highlighted in a different color.

Enjoy learning and have fun with Bubble Sort!
        ]]>
    </string>

    <!-- NEW: Explanation for Selection Sort -->
    <string name="explanation_text_selection">
        <![CDATA[
What is Selection Sort?

Selection Sort is a straightforward algorithm that works by finding the smallest element
in the unsorted portion of the list and swapping it with the element at the beginning
of the unsorted portion.

Imagine you have a row of numbers. Selection Sort will scan the entire list to find
the smallest number, then swap it into the first position. Next, it moves the boundary
of the sorted portion one step to the right and repeats the process for the remaining
unsorted part, until the entire list is sorted.

Here is an example in Kotlin:\n\n

fun selectionSort(arr: MutableList<Int>) {\n
\u00A0    for (i in 0 until arr.size - 1) {\n
\u00A0\u00A0        var minIndex = i\n
\u00A0\u00A0        for (j in i+1 until arr.size) {\n
\u00A0\u00A0\u00A0            if (arr[j] < arr[minIndex]) {\n
\u00A0\u00A0\u00A0\u00A0               minIndex = j\n
\u00A0\u00A0\u00A0            }\n
\u00A0\u00A0        }\n
\u00A0\u00A0        // Swap the found minimum with the element at i\n
\u00A0\u00A0        val temp = arr[i]\n
\u00A0\u00A0        arr[i] = arr[minIndex]\n
\u00A0\u00A0        arr[minIndex] = temp\n
\u00A0    }\n
}\n\n

In this visualizer, each bar represents a number. The numbers are displayed on the bars,
and the two bars being compared are highlighted in a different color.

Enjoy learning and have fun with Selection Sort!
        ]]>
    </string>

    <!-- Explanation for BFS in Graphs -->
    <string name="explanation_text_bfs">
        <![CDATA[
What is a Graph?\n\n
A graph is a collection of nodes (or vertices) connected by edges. Graphs are used to model relationships between objects, such as social networks, transportation routes, or web pages.\n\n
What is Breadth-First Search (BFS)?\n\n
Breadth-First Search (BFS) is an algorithm used to traverse or search through a graph. Starting from a source node, BFS visits all the neighbors of that node first before moving on to the neighbors’ neighbors. This level-by-level approach is useful for finding the shortest path in an unweighted graph.\n\n
How Does BFS Work?\n\n
1. Start from a source node and mark it as visited.\n
2. Add the source node to a queue.\n
3. While the queue is not empty:\n
\u00A0\u00A0- Remove the node at the front of the queue.\n
\u00A0\u00A0- For each neighbor of this node:\n
\u00A0\u00A0\u00A0\u00A0If the neighbor has not been visited, mark it as visited, record its level (distance from the source), and add it to the queue.\n
4. Continue until all reachable nodes have been visited.\n\n
Example in Kotlin:\n\n
fun bfs(start: Int, adjacency: List<List<Int>>): List<Int> {\n
\u00A0\u00A0    val visited = MutableList(adjacency.size) { false }\n
\u00A0\u00A0    val level = MutableList(adjacency.size) { -1 }\n
\u00A0\u00A0    val queue = ArrayDeque<Int>()\n\n
\u00A0\u00A0    visited[start] = true\n
\u00A0\u00A0    level[start] = 0\n
\u00A0\u00A0    queue.add(start)\n\n
\u00A0\u00A0    while (queue.isNotEmpty()) {\n
\u00A0\u00A0\u00A0        val current = queue.removeFirst()\n
\u00A0\u00A0\u00A0        // Process each neighbor of current\n
\u00A0\u00A0\u00A0        for (neighbor in adjacency[current]) {\n
\u00A0\u00A0\u00A0\u00A0            if (!visited[neighbor]) {\n
\u00A0\u00A0\u00A0\u00A0\u00A0                visited[neighbor] = true\n
\u00A0\u00A0\u00A0\u00A0\u00A0                level[neighbor] = level[current] + 1\n
\u00A0\u00A0\u00A0\u00A0\u00A0                queue.add(neighbor)\n
\u00A0\u00A0\u00A0\u00A0            }\n
\u00A0\u00A0\u00A0        }\n
\u00A0\u00A0    }\n\n
\u00A0\u00A0    return level // Returns the distance from the start for each node\n
    }\n\n
What Will You See in This Visualizer?\n\n
In this visualizer, each node of the graph is represented as a circle arranged in a circular layout.\n
Edges between nodes are drawn as lines. The color of each node indicates its BFS status:\n
\u00A0\u00A0- Unvisited nodes appear in Gray.\n
\u00A0\u00A0- Visited nodes are shown in Blue.\n
\u00A0\u00A0- The current node being processed is highlighted in Red.\n\n
Watch how the algorithm expands level by level as you step through or play the animation.\n\n
Enjoy exploring graphs and learning how BFS works!
        ]]>
    </string>

    <string name="graph_info_bfs">
        Graph with %1$d nodes. Start node: %2$d.
    </string>
    <string name="results_title_bfs">BFS Search Results</string>
    <string name="results_description_bfs">
        The BFS search has completed the graph exploration. The visit order was: %1$s.
    </string>

    <!-- Explanation for Dijkstras Algorithm -->
    <string name="explanation_text_dijkstra">
    <![CDATA[
What is Dijkstras Algorithm?\n\n
Dijkstras Algorithm is a method to find the shortest path from a source node to every other node in a graph with non-negative edge weights. Imagine you have a map of cities connected by roads with different travel costs. This algorithm helps you determine the minimum distance required to travel to each city.\n\n
How Does It Work?\n\n
1. Initialize all distances to infinity (Int.MAX_VALUE), except for the source node, which is set to 0.\n
2. Mark all nodes as unvisited. Then, select the unvisited node with the smallest known distance. We call this the current node.\n
3. Mark the current node as visited. Next, look at all of its neighbors and update their distances if a shorter path is found via the current node.\n
4. Repeat this process until all nodes have been visited or no reachable nodes remain.\n\n
Example in Kotlin:\n\n
fun dijkstra(start: Int, adjacency: List<List<Pair<Int, Int>>>): List<Int> {\n
\u00A0\u00A0    val n = adjacency.size\n
\u00A0\u00A0    val dist = MutableList(n) { Int.MAX_VALUE }\n
\u00A0\u00A0    val visited = MutableList(n) { false }\n\n
\u00A0\u00A0    dist[start] = 0\n\n
\u00A0\u00A0    for (i in 0 until n) {\n
\u00A0\u00A0\u00A0        var u = -1\n
\u00A0\u00A0\u00A0        var minDist = Int.MAX_VALUE\n
\u00A0\u00A0\u00A0        // Find the unvisited node with the smallest distance\n
\u00A0\u00A0\u00A0        for (j in 0 until n) {\n
\u00A0\u00A0\u00A0\u00A0            if (!visited[j] && dist[j] < minDist) {\n
\u00A0\u00A0\u00A0\u00A0\u00A0                u = j\n
\u00A0\u00A0\u00A0\u00A0\u00A0                minDist = dist[j]\n
\u00A0\u00A0\u00A0\u00A0            }\n
\u00A0\u00A0\u00A0        }\n\n
\u00A0\u00A0\u00A0        // If u remains -1, there are no more reachable nodes\n
\u00A0\u00A0\u00A0        if (u == -1) break\n\n
\u00A0\u00A0\u00A0        // Mark u as visited\n
\u00A0\u00A0\u00A0        visited[u] = true\n\n
\u00A0\u00A0\u00A0        // Relax the distances of us neighbors\n
\u00A0\u00A0\u00A0        for ((v, weight) in adjacency[u]) {\n
\u00A0\u00A0\u00A0\u00A0            if (!visited[v]) {\n
\u00A0\u00A0\u00A0\u00A0\u00A0                val newDist = dist[u] + weight\n
\u00A0\u00A0\u00A0\u00A0\u00A0                if (newDist < dist[v]) {\n
\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0                    dist[v] = newDist\n
\u00A0\u00A0\u00A0\u00A0\u00A0                }\n
\u00A0\u00A0\u00A0\u00A0            }\n
\u00A0\u00A0\u00A0        }\n
\u00A0\u00A0    }\n\n
\u00A0\u00A0    return dist // Returns the shortest distance to each node\n
}\n\n
What Will You See in This Visualizer?\n\n
In this visualizer, each node in the graph is displayed as a circle with a number representing its distance from the source node. The edges (lines) show the weight or cost of each connection.\n
The currently processed node at each step will be highlighted in red, the nodes that have been permanently visited (fixed) will appear in blue, and unvisited nodes will appear in gray. As you step through or play the animation, you can watch how the algorithm updates distances and selects the next node with the minimum distance.\n
This step-by-step progression gives you a clear, visual understanding of how Dijkstras identifies the shortest paths in a graph with non-negative weights.\n\n
Enjoy learning and experimenting with Dijkstras Algorithm!
    ]]>
    </string>


    <!-- ========================================================= -->
    <!-- FINAL RESULTS CARD STRINGS                             -->
    <!-- Strings used for displaying the final results of Dijkstras Algorithm -->
    <!-- ========================================================= -->

    <string name="results_title">Detailed Results</string>
    <string name="results_description">
        <![CDATA[
Each circle displays two numbers:\n\n
• The number in the center is the node ID.\n
• The number below is the accumulated cost (i.e., the minimum distance from the origin).\n\n
The red line highlights the shortest route determined by Dijkstras algorithm.
    ]]>
    </string>
    <string name="table_header_iterations">Iterations</string>
    <string name="table_header_node">Node</string>
    <string name="table_header_cost">Accumulated Cost</string>
    <string name="table_row_node">Node</string>
    <string name="results_footer">The red line shows the simplest route from the origin to the destination.</string>
    <string name="origin_label">ORIGIN</string>
    <string name="destination_label">DESTINATION</string>
    <string name="graph_info">
        <![CDATA[
Number of nodes: %1$d\n
Origin: %2$d\n
Destination: %3$d
]]>
    </string>


    <!-- A*  -->
    <string name="explanation_text_astar"><![CDATA[
What is the A* Algorithm?\n\n
A* (A-Star) Algorithm is a method used to find the optimal path between two nodes in a graph by using a heuristic to guide the search. Imagine you have a map and want to find the fastest route between two cities. A* uses both the cost to reach a node and an estimate of the cost from that node to the destination, ensuring a more efficient search.\n\n
How Does It Work?\n\n
1. Start at the origin node. Set its cost (g-score) to 0 and compute its f-score as g + heuristic.\n
2. Add the starting node to an open set.\n
3. While the open set is not empty, select the node with the lowest f-score.\n
4. If this node is the destination, the optimal path has been found.\n
5. Otherwise, remove the node from the open set and mark it as visited.\n
6. For each neighbor, calculate a tentative g-score. If it is lower than the current g-score, update it and set the current node as its parent. Add the neighbor to the open set if not already present.\n
7. Repeat until the destination is reached.\n\n
Example Kotlin Code:\n\n
fun aStar(start: Node, goal: Node): List<Node> {\n
\u00A0\u00A0val openSet = PriorityQueue<Node>(compareBy { it.fScore })\n\n
\u00A0\u00A0start.gScore = 0.0\n
\u00A0\u00A0start.fScore = heuristic(start, goal)\n
\u00A0\u00A0openSet.add(start)\n\n
\u00A0\u00A0while (openSet.isNotEmpty()) {\n
\u00A0\u00A0\u00A0\u00A0val current = openSet.poll()\n\n
\u00A0\u00A0\u00A0\u00A0if (current == goal) {\n
\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0return reconstructPath(current)\n
\u00A0\u00A0\u00A0\u00A0}\n\n
\u00A0\u00A0\u00A0\u00A0for (neighbor in current.neighbors) {\n
\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0val tentativeGScore = current.gScore + distance(current, neighbor)\n\n
\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0if (tentativeGScore < neighbor.gScore) {\n
\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0neighbor.parent = current\n
\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0neighbor.gScore = tentativeGScore\n
\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0neighbor.fScore = tentativeGScore + heuristic(neighbor, goal)\n\n
\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0if (!openSet.contains(neighbor)) {\n
\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0openSet.add(neighbor)\n
\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0}\n
\u00A0\u00A0\u00A0\u00A0}\n
\u00A0\u00A0}\n\n
\u00A0\u00A0return emptyList()\n
}\n\n
In this visualizer, each node is displayed as a circle with a number indicating the accumulated cost from the origin. The algorithm’s progression is shown step-by-step, highlighting the current node, visited nodes, and the optimal path once found.\n\n
Enjoy learning and experimenting with the A* Algorithm!
]]></string>


    <string name="results_title_astar">Detailed Results (A*)</string>
    <string name="results_description_astar"><![CDATA[
Each circle displays two numbers:\n
• The number in the center is the node ID.\n
• The number below is the accumulated cost (i.e., the shortest path cost from the origin).\n\n
The red line highlights the optimal path determined by the A* algorithm.
]]></string>

    <string name="results_footer_astar">The red line shows the optimal path from the origin to the destination.</string>


    <!-- Complete explanation of Genetic Algorithms in English -->
    <string name="explanation_text_ga"><![CDATA[
What is a Genetic Algorithm?\n\n

A Genetic Algorithm (GA) is an optimization technique inspired by the principles of natural evolution as described by Charles Darwin. The central idea is that just as species evolve to better adapt to their environment, a set of candidate solutions (called a population) can evolve to solve a problem in an optimal or near-optimal way.
\n\n
What is it used for?\n\n

- Function Optimization: Finding values that maximize or minimize a cost function.\n
- Design and Engineering: Automating the search for optimal parameters in complex design problems (e.g., antenna design).\n
- Machine Learning: Tuning hyperparameters in AI models or neural networks.\n
- Combinatorial Problems: Discovering optimal routes (e.g., in vehicle routing problems) or production sequences in factories.\n\n

How does it work?\n\n

1. Initial Population:\n
   - A set of candidate solutions (individuals) is generated randomly. Each individual is represented by a set of parameters (chromosomes).\n\n

2. Evaluation (Fitness):\n
   - Each individual is evaluated using a fitness function that measures how good its solution is for the problem at hand.\n\n

3. Selection:\n
   - The best individuals (those with higher fitness) are chosen to act as “parents” for the next generation.\n\n

4. Crossover:\n
   - The chromosomes of two parents are combined to produce one or more “offspring” (new solutions) that inherit characteristics from both parents.\n\n

5. Mutation:\n
   - With a certain probability, small random changes are made to the chromosomes of the offspring to introduce variability and prevent premature convergence.\n\n

6. New Generation:\n
   - A new population is formed from the offspring (and optionally some individuals from the previous generation). The cycle (evaluation, selection, crossover, mutation) is repeated until a stopping criterion is met (for example, a set number of generations or a solution that is “good enough” is found).\n

Advantages and Disadvantages\n\n

- Advantages:\n
   - They do not require derivative information or additional problem-specific knowledge; only a fitness function is needed.\n
   - They can escape local optima thanks to the introduction of mutation and recombination.\n
   - They are often easy to parallelize (e.g., evaluating many individuals simultaneously).\n\n

- Disadvantages:\n
   - They may require many fitness evaluations, which can be computationally expensive.\n
   - They do not always guarantee finding the absolute global optimum.\n\n

Example Code in Kotlin\n\n

fun runGeneticAlgorithm(\n
    populationSize: Int,\n
    generations: Int,\n
    crossoverRate: Double,\n
    mutationRate: Double\n
): List<Individual> {\n
    // Create an initial random population\n
    var population = List(populationSize) {\n
        val x = Random.nextDouble() // main chromosome (e.g., a value in [0,1])\n
        Individual(x, fitnessFunction(x))\n
    }\n
    for (gen in 1..generations) {\n
        // Evaluate fitness for each individual\n
        population = population.map {\n
            val newFitness = fitnessFunction(it.x)\n
            it.copy(fitness = newFitness)\n
        }\n
        // Select parents based on fitness\n
        val parents = selectBest(population)\n
        // Crossover\n
        val offspring = mutableListOf<Individual>()\n
        while (offspring.size < population.size) {\n
            val p1 = parents.random()\n
            val p2 = parents.random()\n
            val childX = if (Math.random() < crossoverRate) {\n
                (p1.x + p2.x) / 2\n
            } else {\n
                p1.x\n
            }\n
            // Mutation\n
            val mutatedX = if (Math.random() < mutationRate) {\n
                childX + (Math.random() - 0.5) * 0.1\n
            } else {\n
                childX\n
            }\n
            offspring.add(Individual(mutatedX, fitnessFunction(mutatedX)))\n
        }\n
        // Form the new population\n
        population = offspring\n
    }\n
    return population\n
}\n\n

In a typical Genetic Algorithm visualizer, you will see:\n
- The current population represented by points or markers.\n
- The fitness value of each individual.\n
- The progression of the best fitness over generations.\n
- Optionally, the effects of crossover and mutation that produce the next generation.\n\n

Why use Genetic Algorithms?\n\n

- They are very flexible and can be applied to a wide range of problems.\n
- They combine the principles of natural selection (exploring the solution space) with exploitation of the best-found solutions.\n
- They can discover novel or very good approximations for problems where other methods may get stuck.\n\n

Enjoy learning and experimenting with Genetic Algorithms!\n
]]></string>

    <!-- Titles and Labels for Panels -->
    <string name="ga_population_title">Population on Fitness Function</string>
    <string name="ga_distribution_title">Distribution of Individuals</string>
    <string name="convergence_progress">Convergence Progress</string>

    <!-- Dynamic Stage Messages -->
    <string name="ga_stage_start">Initial population created!</string>
    <string name="ga_stage_exploring">Exploring different solutions</string>
    <string name="ga_stage_improving">The population is starting to improve</string>
    <string name="ga_stage_converging">We are close to the optimum!</string>

    <!-- Generation and Fitness Labels -->
    <string name="generation_label">Generation: %1$d</string>
    <string name="best_fitness_label">Best Fitness: %1$.2f</string>

    <!-- ========================================================= -->
    <!-- ALGORITHM NAMES                                         -->
    <!-- ========================================================= -->
    <string name="bubble_sort">Bubble Sort Algorithm</string>
    <string name="selection_sort">Selection Sort Algorithm</string>
    <string name="BFS">BFS in Graphs</string>
    <string name="dijkstra">Dijkstras Algorithm</string>
    <string name="astar">A* Algorithm</string>
    <string name="genetic">Genetic Algorithm</string>

    <!-- ========================================================= -->
    <!-- CONTROL BUTTON LABELS                                   -->
    <!-- ========================================================= -->
    <string name="play">Play</string>
    <string name="pause">Pause</string>
    <string name="previous">Previous</string>
    <string name="next">Next</string>
    <string name="reset">Reset</string>

</resources>
