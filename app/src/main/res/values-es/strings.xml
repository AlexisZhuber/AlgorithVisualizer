<!-- Archivo de Strings para el Visualizador de Algoritmos -->
<resources xml:space="preserve">

    <!-- ========================================================= -->
    <!-- GENERAL: Información de la aplicación                   -->
    <!-- ========================================================= -->
    <string name="app_name">Visualizador de Algoritmos</string>


    <!-- ========================================================= -->
    <!-- EXPLICACIONES DE ALGORITMOS                              -->
    <!-- Cada string contiene la explicación y un ejemplo en Kotlin-->
    <!-- ========================================================= -->

    <!-- Explicación para Bubble Sort -->
    <string name="explanation_text_bubble">
        <![CDATA[
¿Qué es Bubble Sort?

Bubble Sort es un algoritmo de ordenación simple que funciona comparando repetidamente
elementos adyacentes en una lista y los intercambia si están en el orden incorrecto.

Imagina que tienes una fila de números y deseas ordenarlos de menor a mayor.
Bubble Sort mirará los dos primeros números, los intercambiará si es necesario, y luego
continuará con el siguiente par, y así sucesivamente. Con cada pasada, el mayor número sin ordenar "flota"
hasta su posición correcta.

Aquí tienes un ejemplo en Kotlin:\n\n

fun bubbleSort(arr: MutableList<Int>) {\n
\u00A0\u00A0    for (i in 0 until arr.size) {\n
\u00A0\u00A0        for (j in 0 until arr.size - i - 1) {\n
\u00A0\u00A0\u00A0            if (arr[j] > arr[j + 1]) {\n
\u00A0\u00A0\u00A0\u00A0               val temp = arr[j]\n
\u00A0\u00A0\u00A0\u00A0               arr[j] = arr[j + 1]\n
\u00A0\u00A0\u00A0\u00A0               arr[j + 1] = temp\n
\u00A0\u00A0 \u00A0\u00A0           }\n
\u00A0\u00A0\u00A0        }\n
\u00A0\u00A0}\n
}\n\n

En este visualizador, cada barra representa un número. Los números se muestran sobre las barras,
y las dos barras que se están comparando se resaltan con un color diferente.

¡Disfruta aprendiendo y diviértete con Bubble Sort!
        ]]>
    </string>

    <!-- Explicación para Selection Sort -->
    <string name="explanation_text_selection">
        <![CDATA[
¿Qué es Selection Sort?

Selection Sort es un algoritmo sencillo que funciona encontrando el elemento más pequeño
en la parte no ordenada de la lista y lo intercambia con el elemento que se encuentra
al inicio de esa parte no ordenada.

Imagina que tienes una fila de números. Selection Sort escaneará toda la lista para encontrar
el número más pequeño y lo intercambiará con el primer elemento. Luego mueve el límite
de la parte ordenada un paso a la derecha y repite el proceso para el resto de la parte
sin ordenar, hasta que toda la lista quede ordenada.

Aquí tienes un ejemplo en Kotlin:\n\n

fun selectionSort(arr: MutableList<Int>) {\n
\u00A0\u00A0    for (i in 0 until arr.size - 1) {\n
\u00A0\u00A0        var minIndex = i\n
\u00A0\u00A0        for (j in i+1 until arr.size) {\n
\u00A0\u00A0\u00A0            if (arr[j] < arr[minIndex]) {\n
\u00A0\u00A0\u00A0\u00A0               minIndex = j\n
\u00A0\u00A0\u00A0            }\n
\u00A0\u00A0        }\n
\u00A0\u00A0        // Intercambia el mínimo encontrado con el elemento en la posición i\n
\u00A0\u00A0        val temp = arr[i]\n
\u00A0\u00A0        arr[i] = arr[minIndex]\n
\u00A0\u00A0        arr[minIndex] = temp\n
\u00A0    }\n
}\n\n

En este visualizador, cada barra representa un número. Los números se muestran sobre las barras,
y las dos barras que se están comparando se resaltan con un color diferente.

¡Disfruta aprendiendo y diviértete con Selection Sort!
        ]]>
    </string>

    <!-- Explicación para BFS en Grafos -->
    <string name="explanation_text_bfs">
        <![CDATA[
¿Qué es un Grafo?\n\n
Un grafo es una colección de nodos (o vértices) conectados por aristas. Los grafos se utilizan para modelar\n
relaciones entre objetos, como redes sociales, rutas de transporte o páginas web.\n\n
¿Qué es la Búsqueda en Anchura (BFS)?\n\n
La Búsqueda en Anchura (BFS) es un algoritmo utilizado para recorrer o buscar en un grafo. Comenzando desde un nodo origen,\n
BFS visita primero a todos los vecinos de ese nodo, y luego a los vecinos de esos vecinos. Este enfoque por niveles es\n
útil para encontrar el camino más corto en un grafo no ponderado.\n\n
¿Cómo Funciona BFS?\n\n
1. Comienza desde un nodo origen y márcalo como visitado.\n
2. Agrega el nodo origen a una cola.\n
3. Mientras la cola no esté vacía:\n
\u00A0\u00A0- Remueve el nodo que está al frente de la cola.\n
\u00A0\u00A0- Para cada vecino de ese nodo:\n
\u00A0\u00A0\u00A0\u00A0Si el vecino no ha sido visitado, márcalo como visitado, registra su nivel (distancia desde el origen) y agrégalo a la cola.\n
4. Continúa hasta que todos los nodos alcanzables hayan sido visitados.\n\n
Ejemplo en Kotlin:\n\n
fun bfs(start: Int, adjacency: List<List<Int>>): List<Int> {\n
\u00A0\u00A0    val visited = MutableList(adjacency.size) { false }\n
\u00A0\u00A0    val level = MutableList(adjacency.size) { -1 }\n
\u00A0\u00A0    val queue = ArrayDeque<Int>()\n\n
\u00A0\u00A0    visited[start] = true\n
\u00A0\u00A0    level[start] = 0\n
\u00A0\u00A0    queue.add(start)\n\n
\u00A0\u00A0    while (queue.isNotEmpty()) {\n
\u00A0\u00A0\u00A0        val current = queue.removeFirst()\n
\u00A0\u00A0\u00A0        // Procesa cada vecino de current\n
\u00A0\u00A0\u00A0        for (neighbor in adjacency[current]) {\n
\u00A0\u00A0\u00A0\u00A0            if (!visited[neighbor]) {\n
\u00A0\u00A0\u00A0\u00A0\u00A0                visited[neighbor] = true\n
\u00A0\u00A0\u00A0\u00A0\u00A0                level[neighbor] = level[current] + 1\n
\u00A0\u00A0\u00A0\u00A0\u00A0                queue.add(neighbor)\n
\u00A0\u00A0\u00A0\u00A0            }\n
\u00A0\u00A0\u00A0        }\n
\u00A0\u00A0    }\n\n
\u00A0\u00A0    return level // Devuelve la distancia desde el nodo origen para cada nodo\n
    }\n\n
¿Qué Verás en Este Visualizador?\n\n
En este visualizador, cada nodo del grafo se representa como un círculo dispuesto en un diseño circular.\n
Las aristas entre los nodos se dibujan como líneas. El color de cada nodo indica su estado BFS:\n
\u00A0\u00A0- Los nodos no visitados aparecen en gris.\n
\u00A0\u00A0- Los nodos visitados se muestran en el color azul.\n
\u00A0\u00A0- El nodo que se está procesando actualmente se resalta en el color rojo.\n\n
Observa cómo el algoritmo se expande nivel por nivel mientras avanzas paso a paso o en modo reproducción.\n\n
¡Disfruta explorando grafos y comprendiendo cómo funciona la BFS!
        ]]>
    </string>

    <string name="graph_info_bfs">
        Grafo con %1$d nodos. Nodo de inicio: %2$d.
    </string>
    <string name="results_title_bfs">Resultados de la búsqueda BFS</string>
    <string name="results_description_bfs">
        La búsqueda BFS ha completado la exploración del grafo. El orden de visita fue: %1$s.
    </string>

    <!-- Explicación para el Algoritmo de Dijkstra -->
    <string name="explanation_text_dijkstra">
    <![CDATA[
¿Qué es el Algoritmo de Dijkstra?\n\n
El Algoritmo de Dijkstra es un método para encontrar la ruta más corta desde un nodo de origen hasta todos los demás nodos en un grafo con pesos no negativos. Imagina que tienes un mapa con ciudades y carreteras que tienen diferentes costos de viaje. Este algoritmo te ayuda a descubrir cuál es la distancia más corta para llegar a cada ciudad.\n\n
¿Cómo Funciona?\n\n
1. Inicializa todas las distancias en infinito (Int.MAX_VALUE), excepto la del nodo de origen, que se establece en 0.\n
2. Marca todos los nodos como no visitados. Luego, selecciona el nodo no visitado con la distancia conocida más pequeña. A este lo llamamos nodo actual.\n
3. Marca el nodo actual como visitado. Luego, revisa todos sus vecinos y actualiza sus distancias si encontraras un camino más corto a través del nodo actual.\n
4. Repite este proceso hasta que todos los nodos hayan sido visitados o no queden nodos alcanzables.\n\n
Ejemplo en Kotlin:\n\n
fun dijkstra(start: Int, adjacency: List<List<Pair<Int, Int>>>): List<Int> {\n
\u00A0\u00A0    val n = adjacency.size\n
\u00A0\u00A0    val dist = MutableList(n) { Int.MAX_VALUE }\n
\u00A0\u00A0    val visited = MutableList(n) { false }\n\n
\u00A0\u00A0    dist[start] = 0\n\n
\u00A0\u00A0    for (i in 0 until n) {\n
\u00A0\u00A0\u00A0        var u = -1\n
\u00A0\u00A0\u00A0        var minDist = Int.MAX_VALUE\n
\u00A0\u00A0\u00A0        // Encuentra el nodo no visitado con la distancia mínima\n
\u00A0\u00A0\u00A0        for (j in 0 until n) {\n
\u00A0\u00A0\u00A0\u00A0            if (!visited[j] && dist[j] < minDist) {\n
\u00A0\u00A0\u00A0\u00A0\u00A0                u = j\n
\u00A0\u00A0\u00A0\u00A0\u00A0                minDist = dist[j]\n
\u00A0\u00A0\u00A0\u00A0            }\n
\u00A0\u00A0\u00A0        }\n\n
\u00A0\u00A0\u00A0        // Si u sigue en -1, no quedan nodos accesibles\n
\u00A0\u00A0\u00A0        if (u == -1) break\n\n
\u00A0\u00A0\u00A0        // Marca u como visitado\n
\u00A0\u00A0\u00A0        visited[u] = true\n\n
\u00A0\u00A0\u00A0        // Relaja las distancias de los vecinos de u\n
\u00A0\u00A0\u00A0        for ((v, weight) in adjacency[u]) {\n
\u00A0\u00A0\u00A0\u00A0            if (!visited[v]) {\n
\u00A0\u00A0\u00A0\u00A0\u00A0                val newDist = dist[u] + weight\n
\u00A0\u00A0\u00A0\u00A0\u00A0                if (newDist < dist[v]) {\n
\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0                    dist[v] = newDist\n
\u00A0\u00A0\u00A0\u00A0\u00A0                }\n
\u00A0\u00A0\u00A0\u00A0            }\n
\u00A0\u00A0\u00A0        }\n
\u00A0\u00A0    }\n\n
\u00A0\u00A0    return dist // Retorna la distancia más corta a cada nodo\n
}\n\n
¿Qué Verás en Este Visualizador?\n\n
En este visualizador, cada nodo del grafo está representado como un círculo con un número que indica su distancia desde el nodo inicial. Las aristas (líneas) muestran el peso o costo de cada conexión.\n
El nodo que se está procesando en cada paso se marcará en rojo, los nodos visitados aparecerán en azul y los nodos aún no visitados estarán en gris. A medida que avances paso a paso o reproduzcas la animación, podrás observar cómo el algoritmo va actualizando las distancias y eligiendo el próximo nodo con la distancia mínima.\n
Esta progresión paso a paso te permitirá comprender de forma clara y visual cómo Dijkstra determina las rutas más cortas en un grafo con pesos no negativos.\n\n
¡Disfruta aprendiendo y experimentando con el Algoritmo de Dijkstra!
    ]]>
    </string>


    <!-- ========================================================= -->
    <!-- RESULTADOS FINALES: Tarjeta de Resultados               -->
    <!-- Se muestran detalles y resultados del algoritmo Dijkstra -->
    <!-- ========================================================= -->

    <string name="results_title">Resultados Detallados</string>
    <string name="results_description">
        <![CDATA[
Cada círculo muestra dos números:\n\n
• El número en el centro es el identificador del nodo.\n
• El número debajo es el costo acumulado (la distancia mínima desde el origen).\n\n

La línea en rojo indica la ruta más corta determinada por el algoritmo de Dijkstra.
    ]]>
    </string>
    <string name="table_header_iterations">Iteraciones</string>
    <string name="table_header_node">Punto</string>
    <string name="table_header_cost">Costo acumulado</string>
    <string name="table_row_node">Punto</string>
    <string name="results_footer">La línea roja muestra el recorrido más simple desde el origen hasta el destino.</string>
    <string name="origin_label">ORIGEN</string>
    <string name="destination_label">DESTINO</string>
    <string name="graph_info">
        <![CDATA[
Número de nodos: %1$d\n
Origen: %2$d\n
Destino: %3$d
]]>
    </string>


    <!-- A*  -->
    <string name="explanation_text_astar"><![CDATA[
¿Qué es el Algoritmo A*?\n\n
El Algoritmo A* (A-Star) es un método utilizado para encontrar la ruta óptima entre dos nodos en un grafo mediante el uso de una heurística que guía la búsqueda. Imagina que tienes un mapa y deseas encontrar la ruta más rápida entre dos ciudades. A* utiliza tanto el costo para llegar a un nodo como una estimación del costo desde ese nodo hasta el destino, lo que garantiza una búsqueda más eficiente.\n\n
¿Cómo Funciona?\n\n
1. Comienza en el nodo de origen. Establece su costo (g-score) en 0 y calcula su f-score como g + heurística.\n
2. Agrega el nodo de inicio a un conjunto abierto.\n
3. Mientras el conjunto abierto no esté vacío, selecciona el nodo con el f-score más bajo.\n
4. Si este nodo es el destino, se ha encontrado la ruta óptima.\n
5. De lo contrario, elimina el nodo del conjunto abierto y márcalo como visitado.\n
6. Para cada vecino, calcula un g-score tentativo. Si es menor que el g-score actual, actualízalo y establece el nodo actual como su padre. Agrega el vecino al conjunto abierto si aún no está presente.\n
7. Repite hasta alcanzar el destino.\n\n
Ejemplo de Código en Kotlin:\n\n
fun aStar(start: Node, goal: Node): List<Node> {\n
\u00A0\u00A0val openSet = PriorityQueue<Node>(compareBy { it.fScore })\n\n
\u00A0\u00A0start.gScore = 0.0\n
\u00A0\u00A0start.fScore = heuristic(start, goal)\n
\u00A0\u00A0openSet.add(start)\n\n
\u00A0\u00A0while (openSet.isNotEmpty()) {\n
\u00A0\u00A0\u00A0\u00A0val current = openSet.poll()\n\n
\u00A0\u00A0\u00A0\u00A0if (current == goal) {\n
\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0return reconstructPath(current)\n
\u00A0\u00A0\u00A0\u00A0}\n\n
\u00A0\u00A0\u00A0\u00A0for (neighbor in current.neighbors) {\n
\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0val tentativeGScore = current.gScore + distance(current, neighbor)\n\n
\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0if (tentativeGScore < neighbor.gScore) {\n
\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0neighbor.parent = current\n
\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0neighbor.gScore = tentativeGScore\n
\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0neighbor.fScore = tentativeGScore + heuristic(neighbor, goal)\n\n
\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0if (!openSet.contains(neighbor)) {\n
\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0openSet.add(neighbor)\n
\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0}\n
\u00A0\u00A0\u00A0\u00A0}\n
\u00A0\u00A0}\n\n
\u00A0\u00A0return emptyList()\n
}\n\n
En este visualizador, cada nodo se muestra como un círculo con un número que indica el costo acumulado desde el origen. La progresión del algoritmo se muestra paso a paso, resaltando el nodo actual, los nodos visitados y la ruta óptima una vez encontrada.\n\n
¡Disfruta aprendiendo y experimentando con el Algoritmo A*!
]]></string>

    <string name="results_title_astar">Resultados Detallados (A*)</string>
    <string name="results_description_astar"><![CDATA[
Cada círculo muestra dos números:\n
• El número en el centro es el identificador del nodo.\n
• El número debajo es el costo acumulado (la distancia mínima desde el origen).\n
La línea en rojo indica la ruta óptima determinada por el algoritmo A*.
]]></string>
    <string name="results_footer_astar">La línea roja muestra el recorrido óptimo desde el origen hasta el destino.</string>


    <!-- ========================================================= -->
    <!-- NOMBRES DE ALGORITMOS                                   -->
    <!-- ========================================================= -->
    <string name="bubble_sort">Bubble Sort</string>
    <string name="selection_sort">Selection Sort</string>
    <string name="BFS">BFS en Grafos</string>
    <string name="dijkstra">Dijkstra</string>
    <string name="astar">A*</string>


    <!-- ========================================================= -->
    <!-- ETIQUETAS DE BOTONES DE CONTROL                        -->
    <!-- ========================================================= -->
    <string name="play">Reproducir</string>
    <string name="pause">Pausar</string>
    <string name="previous">Anterior</string>
    <string name="next">Siguiente</string>
    <string name="reset">Reiniciar</string>

</resources>
